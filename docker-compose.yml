services:
#  spring:
#    build:
#      context: ./backend
#      dockerfile: Dockerfile
#    restart: always
#    depends_on:
#      - mysqldb
#    ports:
#      - 8082:8082

  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      - mysqldb
    ports:
      - 8080:8080
    command: sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8080"
    networks:
      - app-tier

  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - HOST=0.0.0.0  # 호스트 환경 변수 설정
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    networks:
      - app-tier

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - fastapi
      - react
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/var/www/frontend
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - app-tier

  certbot: #certbot 컨테이너 추가
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  mysqldb:
    image: mysql:latest
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - mysqldb-data:/var/lib/mysql
    networks:
      - app-tier
      
  phpmyadmin:
    image: phpmyadmin
    restart: always
    links:
      - mysqldb
    ports:
      - 8083:80
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: mysqldb
      PMA_PORT: 3306
    networks:
      - app-tier

  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    networks:
      - app-tier

  celery_worker:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    command: celery -A celery_app worker --loglevel=info
    restart: always
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest@rabbitmq//
    networks:
      - app-tier

#  mongodb:
#    image: mongo:latest
#    container_name: mongodb
#    restart: always
#    env_file:
#      - .env
#    volumes:
#      - mongodb-data:/data/db
#    ports:
#      - '27017:27017'
#
#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    restart: always
#    ports:
#      - '8085:8081'
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
#      ME_CONFIG_MONGODB_SERVER: mongodb
#      ME_CONFIG_MONGODB_PORT: 27017
#      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
#      ME_CONFIG_MONGODB_AUTH_DATABASE: admin
#      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
#      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
#    depends_on:
#      - mongodb



volumes:
  mysqldb-data:
#  mongodb-data:

networks:
    app-tier:
        driver: bridge